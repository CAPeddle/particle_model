@startuml
title Class Diagram

interface Influencer
{
    {abstract} +GetState()
}

interface iObject
{
    {abstract} +InfluenceStateChanged(state)
}

Influencer <|.. Object
iObject <|.. Object

class Object {
	- influencers: Influencer[0..*]
	- objects: Object[0..*]

  +GetState()
	+ProcessInfluencers()
	+ProcessCombinedState()
	+InfluenceStateChanged(state)
	
}



class State {
}


abstract class Observable

Observable <|.. ConcreteObservable


abstract class Observable{
 -observers: ObserverBase[0..*]

 +Register(Observer o)
 +Deregister(Observer o)
 +Notify()
}

class ConcreteObservable


interface ObserverBase


@enduml
